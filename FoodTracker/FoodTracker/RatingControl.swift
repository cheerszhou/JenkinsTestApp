//
//  RatingControl.swift
//  FoodTracker
//
//  Created by zxx_mbp on 2018/3/31.
//  Copyright © 2018年 zxx_mbp. All rights reserved.
//

import UIKit

@IBDesignable class RatingControl: UIStackView {
//    MARK:Properties
    private var ratingButtons = [UIButton]()
    var rating = 0 {
        didSet {
            updateButtonSelectionState()
        }
    }
    
    @IBInspectable var starSize:CGSize = CGSize(width: 44.0, height: 44.0){
        didSet {
            self.setupButtons()
        }
    }
    @IBInspectable var starCounting:Int = 5 {
        didSet {
            setupButtons()
        }
    }
    
    //MARK:Initializer
    override init(frame: CGRect) {
        super.init(frame:frame)
        setupButtons()
    }
    required init(coder: NSCoder) {
        super.init(coder: coder)
        setupButtons()
    }

    //MARK:Private
    private func setupButtons() {
        //clear the existing buttons
        for button in ratingButtons {
            removeArrangedSubview(button)
            button.removeFromSuperview()
        }
        ratingButtons.removeAll()
        
        //load buttons image
        let bundle = Bundle(for: type(of: self))
        let emptyStarImage = UIImage(named: "emptyStar", in: bundle, compatibleWith: self.traitCollection)
        let filledStarImage = UIImage(named: "filledStar", in: bundle, compatibleWith: self.traitCollection)
        let highlightedStarImage = UIImage(named: "highlightedStar", in: bundle, compatibleWith: self.traitCollection)
        
        for index in 1...starCounting {
            
            //Create a button with red color
            let redButton = UIButton()
            
            //Set button images
            redButton.setImage(emptyStarImage, for: UIControlState.normal)
            redButton.setImage(filledStarImage, for: .selected)
            redButton.setImage(highlightedStarImage, for: .highlighted)
            redButton.setImage(highlightedStarImage, for: [.highlighted,.selected])
            
            //Set up constraints
            //Close autogenerated constraints
            redButton.translatesAutoresizingMaskIntoConstraints = false
            redButton.widthAnchor.constraint(equalToConstant: starSize.width).isActive = true
            redButton.heightAnchor.constraint(equalToConstant: starSize.height).isActive = true
            
            redButton.addTarget(self, action: #selector(RatingControl.ratingButtonAction(snder:)), for: UIControlEvents.touchUpInside)
            
            //Add Accessibility label
            redButton.accessibilityLabel = "Set \(index) star rating"
            
            //Add to stackView
            self.addArrangedSubview(redButton)
            
            //add new button to rating buutons array
            ratingButtons.append(redButton)
        }
        
        updateButtonSelectionState()
    }
    
    func updateButtonSelectionState() {
        for (index,button) in ratingButtons.enumerated() {
            button.isSelected = index < rating
            var hintString:String?
            if index + 1 == rating {
                hintString = "Tap to reset the rating to zero"
            }else {
                hintString = nil
            }
            var valueString:String
            switch rating {
            case 0:
                valueString = "No rating star"
            case 1:
                valueString = "1 rating star"
            default:
                valueString = "\(rating) rating stars"
                
            }
            
            button.accessibilityHint = hintString
            button.accessibilityValue = valueString
        }
    }
    
//    MARK:BUTTON ACTION
    @objc func ratingButtonAction(snder:UIButton) {
        guard let index = ratingButtons.index(of: snder) else {
            fatalError("The button,\(snder), is not in the ratingButtons array:\(ratingButtons)")
        }
        //Calculated the rating of the selected button
        let selecteRating = index + 1
        
        if selecteRating == rating {
            // If the selected star represents the current rating,reset the rating to 0.
            rating = 0
        }else {
            rating = selecteRating
        }
        
    }
}
